#!/bin/bash

set -o nounset

# Setup:
# - Single source repo for webpipe/latch, for convenience, code sharing, etc.
# - Two different basis packages?  Or one.
#   - A single package can expose two executables: webpipe and latch.
#   - And the webpipe.R library.
# - A single set of documentation?  If it is versioned, that doesn't really
# make that much sense.  But for now we won't bother versioning it.

readonly THIS_DIR=$(readlink -f $(dirname $0))

export PYTHONPATH=$THIS_DIR:~/hg/tnet/python:~/hg/json-template/python

manifest() {
  # TODO: Use deps in _tmp
  # TODO: build basis package
  py-deps webpipe.webpipe webpipe.file2html
  ls webpipe/*.html webpipe.R webpipe.sh
}

# TODO: Make a real basis package out of this.  Look at container-tools
# package.
release-manifest() {
  # NOTE: this versioning scheme is different than our date-based one.
  # Reconcile them.

  local version=0.1
  basisc echo-stamp webpipe $version > _tmp/Package.stamp
  echo _tmp/Package.stamp $version/Package.stamp

  # This doesn't work because we don't always have two tokens.

  # add a versioned directory
  #manifest | awk -v version=$version '{ print $1 " " version "/" $2 }'
}

Build() {
  manifest | multi tar _tmp/webpipe.tar.gz
}


run-py-tests() {
  ls *_test.py | awk '{ print "./" $0 }' | sh -x -e
}

Test() {
  set -o errexit

  pushd webpipe
  run-py-tests
  popd

  pushd common
  run-py-tests
  popd

  pushd latch
  run-py-tests
  popd

  echo PASS
}

# TODO:
# - usage-address.txt should be set

Deploy() {
  # copy basis package somewhere?
  echo
}

"$@"

